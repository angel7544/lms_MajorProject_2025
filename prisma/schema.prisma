generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid())
  email        String           @unique
  name         String?
  role         Role             @default(STUDENT)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  authId       String           @unique
  bio          String?
  onBoarded    Boolean          @default(false)
  profilePic   String?
  signature    String?
  accesses     Access[]
  certificates Certificate[]
  courses      Course[]
  mail         MailCredentials?
  categories   UserCategory[]
  goals        UserGoal[]
  progress     progress[]
  purchases    purchases[]
  requests     requests[]

  @@unique([id, authId])
}

model MailCredentials {
  id        String   @id @default(uuid())
  email     String
  pass      String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id        String     @id @default(uuid())
  title     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     UserGoal[]

  @@unique([id, title])
}

model Category {
  id        String         @id @default(uuid())
  title     String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  courses   Course[]
  users     UserCategory[]

  @@unique([id, title])
}

model UserCategory {
  userId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId])
}

model UserGoal {
  userId String
  goalId String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, goalId])
}

model Course {
  id           String        @id @default(uuid())
  title        String
  description  String?
  thumbnail    String?
  price        Float?
  isPublished  Boolean       @default(false)
  isFree       Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categoryid   String?
  duration     Int           @default(5)
  accesses     Access[]
  certificates Certificate[]
  chapters     Chapter[]
  category     Category?     @relation(fields: [categoryid], references: [id])
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases    purchases[]
}

model purchases {
  id        String             @id @default(uuid())
  status    PurchaseStatusEnum @default(IN_PROGRESS)
  price     Float
  orderId   String?
  paymentId String?
  receiptId String?
  address   String?
  name      String?
  isFree    Boolean            @default(false)
  courseId  String
  userId    String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  course    Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Access {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model Chapter {
  id          String       @id @default(uuid())
  title       String
  content     String?
  order       Int?
  isFree      Boolean      @default(false)
  videoUrl    String?
  isPublished Boolean      @default(false)
  courseId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attachments attachment[]
  progress    progress[]
}

model attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  type      String
  chapterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model progress {
  id        String   @id @default(uuid())
  status    Status   @default(IN_PROGRESS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model requests {
  id        String   @id @default(uuid())
  phone     String
  email     String
  message   String
  userId    String
  status    Status   @default(IN_PROGRESS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id        String   @id @default(uuid())
  title     String
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([courseId, userId])
}

enum Role {
  STUDENT
  TEACHER
}

enum PurchaseStatusEnum {
  COMPLETED
  IN_PROGRESS
  FAILED
}

enum Status {
  COMPLETED
  IN_PROGRESS
}
